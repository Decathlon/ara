version: 2.1
executors:
  docker-publisher:
    environment:
      DATABASE_IMAGE_NAME: decathlon/ara-db
      SERVER_IMAGE_NAME: decathlon/ara-server
    docker:
      - image: circleci/openjdk:8u222-stretch
jobs:
  build_app:
    executor: docker-publisher
    working_directory: ~/ara
    steps:
      - checkout
      - restore_cache:
          key: ara-{{ checksum "pom.xml" }}
      - run:
          name: Build Jar
          command: mvn package dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: ara-{{ checksum "pom.xml" }}
      - store_test_results:
          path: server/target/surefire-reports
      - persist_to_workspace:
          root: .
          paths:
            - ./database/instance
            - ./final
  build_latest_images:
    executor: docker-publisher
    working_directory: ~/ara
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker images
          command: |
            docker build -t $DATABASE_IMAGE_NAME:latest /tmp/workspace/database/instance
            docker build -t $SERVER_IMAGE_NAME:latest /tmp/workspace/final
      - run:
          name: Archive Docker images
          command: |
            docker save -o database-image.tar $DATABASE_IMAGE_NAME
            docker save -o server-image.tar $SERVER_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./database-image.tar
            - ./server-image.tar
  build_nightly_images:
    executor: docker-publisher
    working_directory: ~/ara
    steps:
      - attach_workspace:
            at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker images
          command: |
            docker build -t $DATABASE_IMAGE_NAME:nightly /tmp/workspace/database/instance
            docker build -t $SERVER_IMAGE_NAME:nightly /tmp/workspace/final
      - run:
          name: Archive Docker images
          command: |
            docker save -o database-image.tar $DATABASE_IMAGE_NAME
            docker save -o server-image.tar $SERVER_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./database-image.tar
            - ./server-image.tar
  nightly:
    executor: docker-publisher
    steps:
      - run:
          name: Create nightly version tag
          command: echo "${CIRCLE_BRANCH/version\//''}-nightly" > version.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./version.txt
  release:
    executor: docker-publisher
    steps:
      - run:
          name: Create release version tag
          command: echo "${CIRCLE_TAG/v/''}" > version.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./version.txt
  publish_latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker images
          command: |
            docker load -i /tmp/workspace/database-image.tar
            docker load -i /tmp/workspace/server-image.tar
      - run:
          name: Publish Docker Images to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=$(cat /tmp/workspace/version.txt)
            docker push $DATABASE_IMAGE_NAME:latest
            docker push $SERVER_IMAGE_NAME:latest
            docker tag $DATABASE_IMAGE_NAME:latest $DATABASE_IMAGE_NAME:$IMAGE_TAG
            docker tag $SERVER_IMAGE_NAME:latest $SERVER_IMAGE_NAME:$IMAGE_TAG
            docker push $DATABASE_IMAGE_NAME:$IMAGE_TAG
            docker push $SERVER_IMAGE_NAME:$IMAGE_TAG

  publish_nightly:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker images
          command: |
            docker load -i /tmp/workspace/database-image.tar
            docker load -i /tmp/workspace/server-image.tar
      - run:
          name: Publish Docker Images to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $DATABASE_IMAGE_NAME:nightly
            docker push $SERVER_IMAGE_NAME:nightly
workflows:
  version: 2
  build-pr:
    jobs:
      - build_app:
          filters:
            branches:
              ignore: /(^version\/.*)|master/
  build-master:
    jobs:
      - build_app:
          filters:
            branches:
              only: master
      - build_latest_images:
          filters:
            branches:
              only: master
          requires:
            - build_app
  build-nightly:
    jobs:
      - build_app:
          filters:
            branches:
              only: /^version\/.*/
      - build_nightly_images:
          filters:
            branches:
              only: /^version\/.*/
          requires:
            - build_app
      - nightly:
          filters:
            branches:
              only: /^version\/.*/
      - publish_nightly:
          context: ara-context
          requires:
            - build_app
            - build_nightly_images
            - nightly
          filters:
            branches:
              only: /^version\/.*/
  build-release:
    jobs:
      - build_app:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_latest_images:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - build_app
      - release:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish_latest:
          context: ara-context
          requires:
            - build_app
            - build_latest_images
            - release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
