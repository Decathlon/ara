<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.decathlon.ara</groupId>
        <artifactId>ara-parent</artifactId>
        <version>4.0.0-SNAPSHOT</version>
    </parent>
    <artifactId>ara-server</artifactId>
    <packaging>jar</packaging>

    <name>ara-server</name>
    <description>Agile Regression Analyzer - Server</description>

    <properties>
        <java.version>1.8</java.version>

        <!-- BUG http://mapstruct.org/faq/#can-i-use-mapstruct-together-with-project-lombok -->
        <mapstruct.version>1.2.0.Final</mapstruct.version>

        <lombok.version>1.18.2</lombok.version>

        <!-- Overridden to support Java 8 -->
        <assertj.version>3.11.1</assertj.version>

        <!-- From JHipster -->
        <dropwizard-metrics.version>4.0.3</dropwizard-metrics.version>

        <querydsl.version>4.2.1</querydsl.version>

        <!-- Sonar -->
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.junit.reportPaths>
            ${project.build.directory}/surefire-reports,
            ${project.build.directory}/failsafe-reports
        </sonar.junit.reportPaths>
        <sonar.jacoco.reportPaths>
            ${project.build.directory}/coverage-reports/jacoco-ut.exec,
            ${project.build.directory}/coverage-reports/jacoco-it.exec
        </sonar.jacoco.reportPaths>
        <sonar.language>java</sonar.language>
        <!-- Merely a configuration class (duplicated 3 times in this pom.xml) -->
        <sonar.coverage.exclusions>
            **/com/decathlon/ara/service/SettingProviderService.java
        </sonar.coverage.exclusions>

        <!-- EMPTY: will be set by profiles or through command line -->
        <spring.profiles.active></spring.profiles.active>
        <liquibase.database.url></liquibase.database.url>
        <liquibase.database.username></liquibase.database.username>
        <liquibase.database.password></liquibase.database.password>

        <!-- Swagger -->
        <springfox-swagger2.version>2.9.2</springfox-swagger2.version>
    </properties>

    <dependencies>
        <!-- SpringBoot's @ConfigurationProperties -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- JPA/Hibernate -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <!-- @javax.interceptor.InterceptorBinding needed by javax.transaction.Transactional -->
            <groupId>javax.interceptor</groupId>
            <artifactId>javax.interceptor-api</artifactId>
            <version>1.2.2</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
            <version>2.6.11</version>
        </dependency>
        <!-- TODO Use JCache + ehcache3 when Spring Boot will upgrade to Hibernate 5.2 (Java 8 only) -->
        <!-- <dependency> -->
        <!-- <groupId>org.hibernate</groupId> -->
        <!-- <artifactId>hibernate-jcache</artifactId> -->
        <!-- <version>${hibernate.version}</version> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!-- <groupId>org.ehcache</groupId> -->
        <!-- <artifactId>ehcache</artifactId> -->
        <!-- </dependency> -->

        <!-- Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Monitoring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator-docs</artifactId>
            <version>1.5.17.RELEASE</version>
        </dependency>

        <!-- Tests and development -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Inject getters/setters for POJO beans -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
        </dependency>

        <!-- From JHipster -->
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-annotation</artifactId>
            <version>${dropwizard-metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-json</artifactId>
            <version>${dropwizard-metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jcache</artifactId>
            <version>${dropwizard-metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <version>${dropwizard-metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-servlet</artifactId>
            <version>${dropwizard-metrics.version}</version>
        </dependency>

        <!-- Entity<->DTO Mapper classes generation -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- For SshClientHelper -->
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.54</version>
        </dependency>

        <!-- For StructuredEmbeddingsUtil to create and parse JSON arrays and objects -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- Used to escape HTML -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>1.6</version>
        </dependency>

        <!-- DbUnit for loading datasets for integration tests -->
        <dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>2.5.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.springtestdbunit</groupId>
            <artifactId>spring-test-dbunit</artifactId>
            <version>1.3.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Querydsl -->
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-apt</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-sql</artifactId>
            <version>${querydsl.version}</version>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-sql-spring</artifactId>
            <version>${querydsl.version}</version>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger2.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger2.version}</version>
        </dependency>

        <!-- Mail Sending & Templating -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>3.0.10.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring5</artifactId>
            <version>3.0.10.RELEASE</version>
        </dependency>

        <!-- Mainly for ListUtils#partition() to split a List into consecutive sub-lists -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.2</version>
        </dependency>

        <!-- Run Liquibase migration scripts at startup in the Docker images (not enabled otherwise) -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>

        <!-- @Retryable annotations -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-javadoc</artifactId>
            <version>0.9.4</version>
        </dependency>

        <!-- Parse structured embeddings from Cucumber reports -->
        <dependency>
            <groupId>com.decathlon.ara</groupId>
            <artifactId>ara-lib</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <!-- ara-lib is designed to integrate with the project's provided version of Cucumber: -->
                <!-- we override it with a Cucumber fork having another groupId -->
                <exclusion>
                    <groupId>info.cukes</groupId>
                    <artifactId>cucumber-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>info.cukes</groupId>
                    <artifactId>cucumber-java</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>info.cukes</groupId>
                    <artifactId>cucumber-spring</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>info.cukes</groupId>
                    <artifactId>cucumber-junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Cucumber JSON report files generated for the demo project and reports parsing tests -->
        <dependency>
            <groupId>com.decathlon.ara</groupId>
            <artifactId>ara-generated-cucumber-report</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Run Liquibase scripts on the integration database *BEFORE* generating Querydsl table classes from database schema -->
            <!-- Liquibase scripts can also be manually run by "mvn liquibase:updateTestingRollback" / "mvn liquibase:rollback" + a profile -->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>${liquibase.version}</version>
                <configuration>
                    <changeLogFile>src/main/resources/liquibase/master.xml</changeLogFile>
                    <driver>com.mysql.jdbc.Driver</driver>
                    <url>${liquibase.database.url}</url>
                    <username>${liquibase.database.username}</username>
                    <password>${liquibase.database.password}</password>
                    <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>updateTestingRollback</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Generate Querydsl table classes from the integration database schema -->
            <plugin>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-maven-plugin</artifactId>
                <version>${querydsl.version}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>export</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jdbcDriver>com.mysql.jdbc.Driver</jdbcDriver>
                    <jdbcUrl>${liquibase.database.url}</jdbcUrl>
                    <jdbcUser>${liquibase.database.username}</jdbcUser>
                    <jdbcPassword>${liquibase.database.password}</jdbcPassword>
                    <packageName>com.decathlon.ara.domain</packageName>
                    <targetFolder>${project.build.directory}/generated-sources/annotations</targetFolder>
                    <namePrefix>S</namePrefix>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Process Lombok annotations to generate entity byte-codes *BEFORE* JPA entities parsing for Querydsl query types generation -->
            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <includes>com.decathlon.ara.domain</includes>
                            <outputDirectory>${project.build.directory}/generated-sources/annotations</outputDirectory>
                            <processor>
                                com.querydsl.apt.jpa.JPAAnnotationProcessor,<!--
                             -->lombok.launch.AnnotationProcessorHider$AnnotationProcessor
                            </processor>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Add the generated classes to the classpath -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/annotations</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArgs>
                        <compilerArg>
                            -Amapstruct.defaultComponentModel=spring
                        </compilerArg>
                        <compilerArg>
                            -Amapstruct.unmappedTargetPolicy=IGNORE
                        </compilerArg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- Run the self-contained *Test.java Unit Tests (without the integration tests) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run. -->
                    <argLine>${surefireArgLine}</argLine>
                </configuration>
            </plugin>

            <!-- Execution of slow *IT.java integration tests during mvn verify phase. -->
            <!-- See http://javamoods.blogspot.fr/2009/12/unit-and-integration-testing-with-maven.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <spring.profiles.active>${spring.profiles.active}</spring.profiles.active>
                    </systemPropertyVariables>
                    <!-- Sets the VM argument line used when integration tests are run. -->
                    <argLine>${failsafeArgLine}</argLine>
                    <!-- Skips integration tests if the value of skip.integration.tests property is true -->
                    <skipTests>${skip.integration.tests}</skipTests>
                </configuration>
            </plugin>

            <!-- Execute JaCoCo before&after unit-tests&integration-tests to get code-coverage metrics in SonarQube -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.2</version>
                <executions>
                    <!-- Prepares the property pointing to the JaCoCo runtime agent which -->
                    <!-- is passed as VM argument when Maven the Surefire plugin is executed. -->
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                            <!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run. -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                        </configuration>
                    </execution>

                    <!-- Prepares the property pointing to the JaCoCo runtime agent which -->
                    <!-- is passed as VM argument when Maven the Failsafe plugin is executed. -->
                    <execution>
                        <id>pre-integration-test</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
                            <!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for integration tests after -->
                    <!-- integration tests have been run. -->
                    <execution>
                        <id>post-integration-test</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <!-- Merely a configuration class (duplicated 3 times in this pom.xml) -->
                        <exclude>**/com/decathlon/ara/service/SettingProviderService.class</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>1.4.3</version>
                <executions>
                    <execution>
                        <id>pitest</id>
                        <phase>test</phase>
                        <goals>
                            <goal>mutationCoverage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skipPitest}</skip>
                    <outputFormats>
                        <outputFormat>XML</outputFormat>
                        <outputFormat>HTML</outputFormat>
                    </outputFormats>
                    <targetClasses>
                        <!--param>com.decathlon.ara.*</param-->
                        <!-- For now, while we still have too many integration tests versus unit tests, we focus our efforts on these high-value classes: -->
                        <param>com.decathlon.ara.ci.fetcher.*</param>
                        <param>com.decathlon.ara.ci.service.*</param>
                        <param>com.decathlon.ara.ci.util.*</param>
                        <param>com.decathlon.ara.coverage.*</param>
                        <param>com.decathlon.ara.defect.*</param>
                        <param>com.decathlon.ara.domain.ExecutedScenario</param> <!-- it has getHandling() -->
                        <param>com.decathlon.ara.domain.Functionality</param> <!-- it has getCoverage() -->
                        <param>com.decathlon.ara.embedding.bean.*</param>
                        <param>com.decathlon.ara.embedding.util.*</param>
                        <param>com.decathlon.ara.postman.service.*</param>
                        <param>com.decathlon.ara.postman.support.*</param>
                        <param>com.decathlon.ara.report.bean.Element</param> <!-- isPassed() & extract*() -->
                        <param>com.decathlon.ara.report.bean.Embedded</param> <!-- extract*() -->
                        <param>com.decathlon.ara.report.bean.Feature</param> <!-- getReportFileName() -->
                        <param>com.decathlon.ara.report.bean.Step</param> <!-- extract*() -->
                        <param>com.decathlon.ara.report.bean.Tag</param> <!-- extract*() -->
                        <param>com.decathlon.ara.report.service.*</param>
                        <param>com.decathlon.ara.report.util.*</param>
                        <param>com.decathlon.ara.service.*</param>
                        <param>com.decathlon.ara.service.util.*</param>
                    </targetClasses>
                    <excludedClasses>
                        <class>com.decathlon.ara.service.dto.*</class>
                        <class>com.decathlon.ara.service.exception.*</class>
                        <class>com.decathlon.ara.service.mapper.*</class>
                        <class>com.decathlon.ara.service.support.*</class>
                        <!-- Merely a configuration class (duplicated 3 times in this pom.xml) -->
                        <class>com.decathlon.ara.service.SettingProviderService</class>
                    </excludedClasses>
                    <targetTests>
                        <param>com.decathlon.ara.**.*Test</param>
                    </targetTests>
                    <excludedTestClasses>
                        <class>com.decathlon.ara.dbunit.DbUnitExporter</class>
                        <class>com.decathlon.ara.dbunit.DbUnitImporter</class>
                    </excludedTestClasses>
                    <environmentVariables>
                        <spring.profiles.active>${spring.profiles.active}
                        </spring.profiles.active> <!-- For *IT integration tests -->
                    </environmentVariables>
                    <avoidCallsTo>
                        <!--Avoid call to log service so log method are not being mutated-->
                        <avoidCallsTo>org.slf4j</avoidCallsTo>
                        <!--Avoid call to java io outputstream so parsing methods are not being mutated-->
                        <avoidCallsTo>java.io.OutputStream</avoidCallsTo>
                        <avoidCallsTo>com.google.common.base.Preconditions</avoidCallsTo>
                    </avoidCallsTo>
                    <mutators>
                        <mutator>ALL</mutator>
                    </mutators>
                    <exportLineCoverage>true</exportLineCoverage>
                    <!--We want each report to override the former one-->
                    <timestampedReports>false</timestampedReports>
                </configuration>
            </plugin>

            <!-- Make sure the JavaDoc is correct -->
            <plugin>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok-maven-plugin</artifactId>
                <version>1.18.2.0</version>
                <executions>
                    <execution>
                        <id>delombok</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>delombok</goal>
                        </goals>
                        <configuration>
                            <formatPreferences>
                                <javaLangAsFQN>skip</javaLangAsFQN>
                            </formatPreferences>
                            <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
                            <outputDirectory>
                                ${project.build.directory}/delombokified-sources-for-javadoc
                            </outputDirectory>
                            <addOutputDirectory>false</addOutputDirectory> <!-- Only delombokify for JavaDoc -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                    <!-- FIXME : Replace Springfox Javadoc since it's buggy in the dependency resolution and doesn't
                                 seems to be maintened anymore. Added a comment, wait for answers on it.
                                 See: https://github.com/springfox/springfox-javadoc/issues/9
                    <execution>
                        <goals>
                            <goal>javadoc</goal>
                        </goals>
                        <phase>process-classes</phase>
                        <configuration>
                            <doclet>springfox.javadoc.doclet.SwaggerPropertiesDoclet</doclet>
                            <docletArtifact>
                                <groupId>io.springfox</groupId>
                                <artifactId>springfox-javadoc</artifactId>
                                <version>0.9.4</version>
                            </docletArtifact>
                            <additionalOptions>-classdir ${project.build.outputDirectory}</additionalOptions>
                            <subpackages>com.decathlon.ara.web.rest</subpackages>
                            <sourceFileExcludes combine.self="override"/>
                            <useStandardDocletOptions>false</useStandardDocletOptions>
                        </configuration>
                    </execution>
                    -->
                </executions>
                <configuration>
                    <sourcepath>
                        ${project.build.directory}/delombokified-sources-for-javadoc;${project.build.directory}/generated-sources/annotations
                    </sourcepath>
                    <sourceFileExcludes>
                        <!-- Delombok copies Javadoc from fields to getters and setters, but without @return and @param annotations -->
                        <exclude>com/decathlon/ara/ci/bean/**/*.java</exclude>
                        <exclude>com/decathlon/ara/configuration/AraConfiguration.java</exclude>
                        <exclude>com/decathlon/ara/domain/**/*.java</exclude>
                        <exclude>com/decathlon/ara/postman/bean/**/*.java</exclude>
                        <exclude>com/decathlon/ara/postman/model/**/*.java</exclude>
                        <exclude>com/decathlon/ara/service/exception/NotUniqueException.java</exclude>
                        <exclude>com/decathlon/ara/service/support/**/*.java</exclude>
                        <exclude>**/*DTO.java</exclude>
                    </sourceFileExcludes>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.liquibase</groupId>
                                        <artifactId>liquibase-maven-plugin</artifactId>
                                        <versionRange>[3.5.3,)</versionRange>
                                        <goals>
                                            <goal>updateTestingRollback</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.mysema.maven</groupId>
                                        <artifactId>apt-maven-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>process</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.querydsl</groupId>
                                        <artifactId>querydsl-maven-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>export</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-javadoc-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>javadoc</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
                <liquibase.database.url>
                    jdbc:mysql://localhost:3306/ara-dev?useUnicode=yes&amp;characterEncoding=UTF-8
                </liquibase.database.url>
                <liquibase.database.username>root</liquibase.database.username>
                <liquibase.database.password>V*n6MxBq7mr?4P?M</liquibase.database.password>
                <skipPitest>true</skipPitest>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
        <profile>
            <id>dev_in</id>
            <properties>
                <spring.profiles.active>dev_in</spring.profiles.active>
                <liquibase.database.url>
                    jdbc:mysql://localhost:3306/ara-dev-in?useUnicode=yes&amp;characterEncoding=UTF-8
                </liquibase.database.url>
                <liquibase.database.username>root</liquibase.database.username>
                <liquibase.database.password>V*n6MxBq7mr?4P?M</liquibase.database.password>
            </properties>
        </profile>

        <profile>
            <id>in</id>
            <properties>
                <spring.profiles.active>in</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
            <!-- This production profile is too sensitive for it to be configured here. -->
            <!-- We would risk someone inadvertently running tests on it and/or corrupting data. -->
            <!-- The production profile properties are set as system properties provided by the continuous integration job. -->
        </profile>

        <!-- No need to initialize JaCoCo if no tests are made -->
        <profile>
            <activation>
                <property>
                    <!-- Compared to both -DskipTests=true and -DskipITs=true, -Dmaven.test.skip=true will even skip test class compilations -->
                    <name>maven.test.skip</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <jacoco.skip>true</jacoco.skip>
            </properties>
        </profile>
    </profiles>
</project>
