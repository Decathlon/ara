/******************************************************************************
 * Copyright (C) 2020 by the ARA Contributors                                 *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 * 	 http://www.apache.org/licenses/LICENSE-2.0                               *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 *                                                                            *
 ******************************************************************************/

package com.decathlon.ara.scenario.cucumber.resource;

import com.codahale.metrics.annotation.Timed;
import com.decathlon.ara.scenario.cucumber.upload.CucumberScenarioUploader;
import com.decathlon.ara.service.ProjectService;
import com.decathlon.ara.service.exception.BadRequestException;
import com.decathlon.ara.web.rest.util.ResponseUtil;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static com.decathlon.ara.web.rest.util.RestConstants.PROJECT_API_PATH;

@Slf4j
@RestController
@RequestMapping(CucumberResource.PATH)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class CucumberResource {

    static final String PATH = PROJECT_API_PATH + "/cucumber";

    @NonNull
    private final ProjectService projectService;

    @NonNull
    private final CucumberScenarioUploader cucumberScenarioUploader;

    /**
     * POST to move upload the scenario set of a test code.
     *
     * @param projectCode the code of the project in which to work
     * @param sourceCode  the source-code determining the location of the files that are uploaded
     * @param json        the report.json file as generated by a cucumber --dry-run
     * @return OK on success, INTERNAL_SERVER_ERROR on processing error
     */
    @PostMapping("scenarios/upload/{sourceCode}")
    @Timed
    public ResponseEntity<Void> uploadScenarios(@PathVariable String projectCode, @PathVariable String sourceCode, @Valid @RequestBody String json) {
        try {
            cucumberScenarioUploader.uploadCucumber(projectService.toId(projectCode), sourceCode, json);
            return ResponseEntity.ok().build();
        } catch (BadRequestException e) {
            log.error("Failed to upload Cucumber scenarios for source code {}", sourceCode, e);
            return ResponseUtil.handle(e);
        }
    }

}
